"""Cloud provider-specific logging configuration classes."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/configs/cloud.ipynb.

# %% auto 0
__all__ = ['CloudServiceConfig', 'Datadog_ServiceConfig', 'AWSCloudWatch_ServiceConfig', 'GCPLogging_ServiceConfig',
           'AzureLogAnalytics_ServiceConfig']

# %% ../../nbs/configs/cloud.ipynb 2
from ..client.base import OutputMode, LogLevel, ServiceConfig

from ..client.exceptions import LogConfigError

# %% ../../nbs/configs/cloud.ipynb 3
import os
from typing import Optional, Dict, Any
from dataclasses import dataclass, field
from abc import abstractmethod

# %% ../../nbs/configs/cloud.ipynb 4
@dataclass
class CloudServiceConfig(ServiceConfig):
    cloud_provider : str

    @abstractmethod
    def to_platform_config(self) -> Dict[str, Any]:
        """Get cloud provider specific configuration"""
        raise NotImplementedError()

# %% ../../nbs/configs/cloud.ipynb 5
@dataclass
class Datadog_ServiceConfig(CloudServiceConfig):
    """Datadog-specific log configuration"""
    output_mode: OutputMode = "cloud"
    cloud_provider: str = "datadog"
    
    api_key: Optional[str] = field(default=None, repr=False)
    app_key: Optional[str] = field(default=None, repr=False)
    
    site: str = "datadoghq.com"
    service: str = "dc_logger"
    env: str = "production"


    def to_platform_config(self) -> Dict[str, Any]:
        return {
            "api_key": self.api_key,
            "app_key": self.app_key,
            "site": self.site,
            "service": self.service,
            "env": self.env,
            "cloud_provider": self.cloud_provider,
        }
    
    def validate_config(self) -> bool:
        if not self.api_key:
            raise LogConfigError("Datadog API key is required")
        return True


# %% ../../nbs/configs/cloud.ipynb 7
@dataclass
class AWSCloudWatch_ServiceConfig(CloudServiceConfig):
    """AWS CloudWatch-specific log configuration"""
    output_mode: OutputMode = "cloud"
    cloud_provider: str = "aws"
    
    aws_region: str = ""
    log_group: str = ""

    log_stream: Optional[str] = None

    def to_platform_config(self) -> Dict[str, Any]:
        return {
            "aws_region": self.aws_region,
            "log_group": self.log_group,
            "log_stream": self.log_stream,
            "cloud_provider": self.cloud_provider,
        }
    
    def validate_config(self) -> bool:
        if not self.aws_region:
            raise LogConfigError("AWS region is required")
        if not self.log_group:
            raise LogConfigError("AWS log group is required")
        return True

@dataclass
class GCPLogging_ServiceConfig(CloudServiceConfig):
    """Google Cloud Logging-specific configuration"""
    
    output_mode: OutputMode = "cloud"
    cloud_provider: str = "gcp"

    log_name: str = "dc_logger"
    project_id: Optional[str] = None

    def to_platform_config(self) -> Dict[str, Any]:
        return {
            "project_id": self.project_id,
            "log_name": self.log_name,
            "cloud_provider": self.cloud_provider,
        }
    
    def validate_config(self) -> bool:
        if not self.project_id:
            raise LogConfigError("GCP project ID is required")
        return True


@dataclass
class AzureLogAnalytics_ServiceConfig(CloudServiceConfig):
    """Azure Log Analytics-specific configuration"""
    
    workspace_id: Optional[str] = field(default= None)
    shared_key: Optional[str] = field(default = None)
    
    log_type: str = "dc_logger"

    output_mode: str = field(default="cloud", init=False)
    cloud_provider: str = field(default="azure", init=False)
    
    def to_platform_config(self) -> Dict[str, Any]:
        return {
            "workspace_id": self.workspace_id,
            "shared_key": self.shared_key,
            "log_type": self.log_type,
            "cloud_provider": self.cloud_provider,
        }
    def validate_config(self) -> bool:
        if not self.workspace_id:
            raise LogConfigError("Azure workspace ID is required")
        if not self.shared_key:
            raise LogConfigError("Azure shared key is required")
        return True
